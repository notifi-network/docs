"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[753],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={},o="Alerts for new XMTP messages",s={unversionedId:"advanced/xmtp-source",id:"advanced/xmtp-source",title:"Alerts for new XMTP messages",description:"This page will walk through an integration of XMTP as a source using the Notifi React Card and Admin Panel. This will alert an user whenever they receive a new message to any XMTP conversation they have at the time of subscribing.",source:"@site/docs/advanced/xmtp-source.md",sourceDirName:"advanced",slug:"/advanced/xmtp-source",permalink:"/docs/advanced/xmtp-source",draft:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/docs/advanced/xmtp-source.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Supporting multiple addresses",permalink:"/docs/advanced/multi-wallet"},next:{title:"Notifi for users",permalink:"/docs/for-users/"}},p={},c=[{value:"Setting up Card Config",id:"setting-up-card-config",level:2},{value:"Step 1",id:"step-1",level:4},{value:"Step 2",id:"step-2",level:4},{value:"Step 3",id:"step-3",level:4},{value:"Setting up React Card",id:"setting-up-react-card",level:2},{value:"Step 1",id:"step-1-1",level:4},{value:"Step 2",id:"step-2-1",level:4},{value:"Step 3",id:"step-3-1",level:4},{value:"Full code example",id:"full-code-example",level:3}],l={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"alerts-for-new-xmtp-messages"},"Alerts for new XMTP messages"),(0,i.kt)("p",null,"This page will walk through an integration of XMTP as a ",(0,i.kt)("a",{parentName:"p",href:"../integration-overview/alert-depth#source"},"source")," using the ",(0,i.kt)("strong",{parentName:"p"},"Notifi React Card")," and ",(0,i.kt)("strong",{parentName:"p"},"Admin Panel"),". This will alert an user whenever they receive a new message to any XMTP conversation they have at the time of subscribing. "),(0,i.kt)("p",null,"Check this ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=WqnCd-kGqzg"},"Youtube video")," for a walkthrough of the user setup and experience. "),(0,i.kt)("p",null,"Make sure you are using a SDK version above the following ones: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"@notifi-network/notifi-core": "^0.59.2-alpha.3+7347f24",\n"@notifi-network/notifi-react-card": "^0.59.2-alpha.3+7347f24",\n')),(0,i.kt)("h2",{id:"setting-up-card-config"},"Setting up Card Config"),(0,i.kt)("h4",{id:"step-1"},"Step 1"),(0,i.kt)("p",null,"Log in to the ",(0,i.kt)("a",{parentName:"p",href:"https://admin.dev.notifi.network"},"Admin Panel")," and edit the Card you want to use (or create a new one). Turn on ",(0,i.kt)("em",{parentName:"p"},"Advanced Mode")," in the bottom of the config. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Toggle on Advanced Mode",src:n(4409).Z,width:"1100",height:"506"})),(0,i.kt)("p",null,"A new section ",(0,i.kt)("strong",{parentName:"p"},"Inputs")," will appear"),(0,i.kt)("h4",{id:"step-2"},"Step 2"),(0,i.kt)("p",null,"Add a new ",(0,i.kt)("strong",{parentName:"p"},"input")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"XMTP Input")," and click on ",(0,i.kt)("strong",{parentName:"p"},"+"),". "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The input can be named arbitrarily, however it will be referenced in the code later. We are using ",(0,i.kt)("inlineCode",{parentName:"p"},"XMTPTopics")," in this example (these topics are XMTP topics, not Notifi topics).")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Create new input type",src:n(5991).Z,width:"954",height:"342"})),(0,i.kt)("h4",{id:"step-3"},"Step 3"),(0,i.kt)("p",null,"Create a new Notifi Topic of type ",(0,i.kt)("strong",{parentName:"p"},"XMTP")," (note that the name selected for Topic is shown on the React Card Toggle). "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Create xmtp topic",src:n(2994).Z,width:"952",height:"404"})),(0,i.kt)("p",null,"Click on ",(0,i.kt)("strong",{parentName:"p"},"+")," and select the input created in ",(0,i.kt)("a",{parentName:"p",href:"#step-2"},"step 2")," as input reference. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Select xmtp input",src:n(2342).Z,width:"1200",height:"948"})),(0,i.kt)("h2",{id:"setting-up-react-card"},"Setting up React Card"),(0,i.kt)("p",null,"To set up the ",(0,i.kt)("strong",{parentName:"p"},"React Card")," we need to pass in the XMTP topics the user wants to subscribe to as ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," field in the ",(0,i.kt)("inlineCode",{parentName:"p"},"NotifiSubscriptionCard")," component. We can use the ",(0,i.kt)("strong",{parentName:"p"},"input reference")," that we defined above for this. "),(0,i.kt)("h4",{id:"step-1-1"},"Step 1"),(0,i.kt)("p",null,"Fetch the XMTP conversations and topics the user wants to subscribe to. In this example we fetch them using the ",(0,i.kt)("inlineCode",{parentName:"p"},"wagmi")," package and ",(0,i.kt)("inlineCode",{parentName:"p"},"useXmtpStore")," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/xmtp-labs/xmtp-inbox-web/store/xmtp"},(0,i.kt)("inlineCode",{parentName:"a"},"https://github.com/xmtp-labs/xmtp-inbox-web/store/xmtp")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useAccount } from "wagmi";\nimport { useXmtpStore } from "../store/xmtp";\n\n...\n\nconst { conversations } = useXmtpStore();\nconst { address } = useAccount();\n')),(0,i.kt)("h4",{id:"step-2-1"},"Step 2"),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"string[]")," containing all xmtp topic names. This array will be used as input reference later on. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// helper function \nconst buildContentTopic = (name: string): string => `/xmtp/0/${name}/proto`;\n\nconst buildUserInviteTopic = useCallback((): string => {\n  return buildContentTopic(`invite-${address}`);\n}, [address]);\n\nconst buildUserIntroTopic = useCallback((): string => {\n  return buildContentTopic(`intro-${address}`);\n}, [address]);\n\n// this is the object we will pass as input reference\nlet topics = useMemo<string[]>(\n  () => [buildUserInviteTopic(), buildUserIntroTopic()],\n  [buildUserIntroTopic, buildUserInviteTopic],\n);\n\nconst addTopic = (topicName: string) => {\n  if (!topics.includes(topicName)) {\n    topics.push(topicName);\n  }\n};\n\nconversations.forEach((c) => {\n  addTopic(c.topic);\n});\n")),(0,i.kt)("h4",{id:"step-3-1"},"Step 3"),(0,i.kt)("p",null,"Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"string[]")," array as field into the ",(0,i.kt)("inlineCode",{parentName:"p"},"NotifiSubscriptionCard")," component. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'<NotifiSubscriptionCard\n  // Mind that "XMTPTopics" must match the name of the input reference defined in the Admin Panel\n  inputs={{ XMTPTopics: topics }}\n  cardId="<YOUR CARD ID HERE"\n/>\n')),(0,i.kt)("h3",{id:"full-code-example"},"Full code example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { NotifiSubscriptionCard } from "@notifi-network/notifi-react-card";\nimport React, { SetStateAction, useCallback, useMemo } from "react";\nimport { useAccount } from "wagmi";\nimport { useXmtpStore } from "../store/xmtp";\nimport { NotifiContextWrapper } from "./contexts/NotifiContextWrapper";\nimport { Modal } from "./Modal";\ntype Props = {\n  show: boolean;\n  setShowNotifiModal: React.Dispatch<SetStateAction<boolean>>;\n};\n\nexport const NotifiModal = ({ setShowNotifiModal, show }: Props) => {\n  const { conversations } = useXmtpStore();\n  const { address } = useAccount();\n\n  const buildContentTopic = (name: string): string => `/xmtp/0/${name}/proto`;\n\n  const buildUserInviteTopic = useCallback((): string => {\n    return buildContentTopic(`invite-${address}`);\n  }, [address]);\n\n  const buildUserIntroTopic = useCallback((): string => {\n    return buildContentTopic(`intro-${address}`);\n  }, [address]);\n\n  let topics = useMemo<string[]>(\n    () => [buildUserInviteTopic(), buildUserIntroTopic()],\n    [buildUserIntroTopic, buildUserInviteTopic],\n  );\n\n  const addTopic = (topicName: string) => {\n    if (!topics.includes(topicName)) {\n      topics.push(topicName);\n    }\n  };\n\n  conversations.forEach((c) => {\n    addTopic(c.topic);\n  });\n\n  return (\n    <Modal\n      title=""\n      size="sm"\n      show={show}\n      onClose={() => setShowNotifiModal(false)}>\n      {!address ? (\n        <>Loading...</>\n      ) : (\n        <NotifiContext\n          dappAddress="<YOUR DAPP ADDRESS HERE>"\n          env="Development"\n          signMessage={async (message: Uint8Array) => {\n            const result = await signMessageAsync({ message });\n            return arrayify(result);\n          }}\n          walletPublicKey={address ?? ""}\n          walletBlockchain="ETHEREUM"\n        >\n          <NotifiSubscriptionCard\n            inputs={{ XMTPTopics: topics }}\n            cardId="<YOUR CARD ID HERE>"\n          />\n        </NotifiContext>\n      )}\n    </Modal>\n  );\n};\n')))}u.isMDXComponent=!0},4409:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/1-75d1c3b55ec9429449f735924b70fbab.png"},5991:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/2-929f184b4df03ea29bf677f437b6e048.png"},2994:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/3-4f5591707ad3b1a0245dd7a7ed41b7f7.png"},2342:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/4-95c1a283e90f716cbc7014f930e683ed.png"}}]);