"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={},o="Node Client",l={unversionedId:"alert-trigger/node-client/index",id:"alert-trigger/node-client/index",title:"Node Client",description:"Using the Notifi Node SDK, developers are provided with a very flexible and custom alert triggering tool where the Dapp",source:"@site/docs/alert-trigger/node-client/index.md",sourceDirName:"alert-trigger/node-client",slug:"/alert-trigger/node-client/",permalink:"/docs/next/alert-trigger/node-client/",draft:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/blob/main/docs/alert-trigger/node-client/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Admin Portal & Community Manager",permalink:"/docs/next/alert-trigger/admin-portal/"},next:{title:"Displaying Notification History",permalink:"/docs/next/notification-history/"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a client",id:"creating-a-client",level:2},{value:"Login",id:"login",level:2},{value:"publishFusionMessage",id:"publishfusionmessage",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"node-client"},"Node Client"),(0,a.kt)("p",null,"Using the Notifi Node SDK, developers are provided with a very flexible and custom alert triggering tool where the Dapp\nfully owns the decision of when to send out notifications. After configuring alert topics and templates in the\n",(0,a.kt)("a",{parentName:"p",href:"https://admin.notifi.network"},"Notifi Admin Portal"),", developers can utilize the Notifi Node SDK to send notifications.\nExample use cases for this include triggering notifications based on off-chain events, or watching a chain in a\nself-hosted setup."),(0,a.kt)("p",null,"The Notifi Node SDK is available on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-node"},"Github"),"."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"In order to use the Node SDK to publish notifications, you first need to set up the following on the\n",(0,a.kt)("a",{parentName:"p",href:"https://admin.notifi.network"},"Notifi Admin Portal"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A Dapp account (an account created on Admin Portal, NOT the Notifi Hub)"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"/docs/next/create-topics/api-triggered"},'"Sent from my server" topic'),", created in Alert Manager"),(0,a.kt)("li",{parentName:"ul"},"One or more subscriptions for users on that topic"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"/docs/next/create-topics/templates"},"set of templates on that topic")," for each messaging platform you want to support")),(0,a.kt)("p",null,"When you have these things, you will be able to copy the SID and SECRET for your Dapp account\nunder Account Settings, and the Event Type ID from your topic."),(0,a.kt)("h2",{id:"creating-a-client"},"Creating a client"),(0,a.kt)("p",null,"First, instantiate a client in your Node application:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  NotifiClient,\n  NotifiEnvironment,\n  createNotifiService, \n  createDataplaneClient, \n  createGraphQLClient,\n} from '@notifi-network/notifi-node';\n\nconst env: NotifiEnvironment = 'Production';\nconst gqlClient = createGraphQLClient(env);\nconst notifiService = createNotifiService(gqlClient);\nconst dataplaneApiClient = createDataplaneClient(env);\nconst client = new NotifiClient(notifiService, dataplaneApiClient);\n")),(0,a.kt)("h2",{id:"login"},"Login"),(0,a.kt)("p",null,"Once you've created your client, log in using the SID and SECRET for your Dapp account,\nwhich can be found under Account Settings in the ",(0,a.kt)("a",{parentName:"p",href:"https://admin.notifi.network/"},"Admin Console"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const MY_SID = process.env.MY_SID;\nconst MY_SECRET = process.env.MY_SECRET;\nconst { token, expiry } = await client.logIn({\n    sid: MY_SID,\n    secret: MY_SECRET\n})\n")),(0,a.kt)("p",null,"The returned ",(0,a.kt)("inlineCode",{parentName:"p"},"token")," is a ",(0,a.kt)("a",{parentName:"p",href:"https://jwt.io"},"JavaScript Web Token")," that you will use to authenticate\nall other requests made by your Node application."),(0,a.kt)("h2",{id:"publishfusionmessage"},"publishFusionMessage"),(0,a.kt)("p",null,"Once you have a token, you can then use it to publish messages to your topic. This is done through the\n",(0,a.kt)("inlineCode",{parentName:"p"},"NotifiClient.publishFusionMessage")," API."),(0,a.kt)("p",null,"To send a message to ",(0,a.kt)("strong",{parentName:"p"},"everyone")," subscribed to a particular topic, use the call below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'await client.publishFusionMessage(token, [{\n    eventTypeId: "abc123",\n    variablesJson: {\n        message: "Hello from Notifi!",\n        items: [\n            1,\n            2,\n            3    \n        ]\n    }\n}]);\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"eventTypeId"),': The "Event Type ID" associated with the topic you\'re publishing to.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"variablesJson"),": A bundle of JSON-serializable variables to be used during rendering\nof your message templates. This variable presents itself in your templates as ",(0,a.kt)("inlineCode",{parentName:"li"},"eventData")," -\ne.g. the expression ",(0,a.kt)("inlineCode",{parentName:"li"},"{{eventData.fromAddress}}"),' in your template will expand as "0x123"\nin the example above.')),(0,a.kt)("p",null,"To send a message to ",(0,a.kt)("strong",{parentName:"p"},"only specific users"),", also add the ",(0,a.kt)("inlineCode",{parentName:"p"},"specificWallets")," parameter,\nwhich is an array of wallet public key and blockchain name pairs - the message will be sent\nto all of these:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'await client.publishFusionMessage(token, [{\n    eventTypeId: "abc123",\n    variablesJson: {\n        fromAddress: "0x123",\n        amount: 250\n    },\n    specificWallets: [\n        {\n            walletPublicKey: "0x123",\n            walletBlockchain: "ETHEREUM"\n        },\n        {\n            walletPublicKey: "c12",\n            walletBlockchain: "SOLANA"\n        }\n    ]\n}]);\n')))}d.isMDXComponent=!0}}]);