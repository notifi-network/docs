"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),f=i,h=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={},a="Node Client",l={unversionedId:"alert-trigger/node-client/index",id:"alert-trigger/node-client/index",title:"Node Client",description:"The Node Client is available on Github.",source:"@site/docs/alert-trigger/node-client/index.md",sourceDirName:"alert-trigger/node-client",slug:"/alert-trigger/node-client/",permalink:"/docs/alert-trigger/node-client/",draft:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/docs/alert-trigger/node-client/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sending an alert through the Admin Portal",permalink:"/docs/alert-trigger/admin-panel/"},next:{title:"Displaying Notification History",permalink:"/docs/notification-history/"}},p={},s=[{value:"login",id:"login",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"node-client"},"Node Client"),(0,i.kt)("p",null,"The Node Client is available on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-node"},"Github"),"."),(0,i.kt)("p",null,"Generally, it is used for advanced functionality where you need to directly\ncall Notifi via an API. One example is implementing your own monitoring\nservice for dapp specific on-chain or off-chain events with a custom parser.\nThis enables very flexible and custom alert triggering logic where the dapp\nfully owns the decision of when to send out notifications."),(0,i.kt)("p",null,"The Node Client has 9 endpoints which will be described in detail below.\nTo follow along, please clone the sample of the Node Client on\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-node-sample"},"Github"),"."),(0,i.kt)("p",null,"First, start the server with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run dev"),"."),(0,i.kt)("h2",{id:"login"},"login"),(0,i.kt)("p",null,"The server will be running at ",(0,i.kt)("inlineCode",{parentName:"p"},"https://localhost:8080"),". To login, you can use the following script below.\nReplace the ",(0,i.kt)("inlineCode",{parentName:"p"},"sid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secret")," fields with your ",(0,i.kt)("inlineCode",{parentName:"p"},"sid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"secret")," that can be found on the\n",(0,i.kt)("a",{parentName:"p",href:"https://admin.dev.notifi.network/"},"Admin Console"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'#!/bin/bash\n\n# Test the gateway to see if it\'s working\n\ncurl --location --request POST \'http://localhost:8080/login\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "sid": "9MJEU0",\n    "secret": "XBLNWj"\n}\'\n')),(0,i.kt)("p",null,"This will return a response like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{"token":"eyJhbG","expiry":"2023-07-24T22:06:58.735Z"}\n')),(0,i.kt)("p",null,"You will need the token in the future so please save this. If the token\nexpires, please run this again to issue a new token."))}u.isMDXComponent=!0}}]);