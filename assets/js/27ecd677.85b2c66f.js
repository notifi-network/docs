"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1370],{5885:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=t(4848),o=t(8453);const a={},r="Integrating Notifi React card",s={id:"alert-subscribe/react-card/index",title:"Integrating Notifi React card",description:"To see the source code, look at the Notifi SDK.",source:"@site/docs/alert-subscribe/react-card/index.md",sourceDirName:"alert-subscribe/react-card",slug:"/alert-subscribe/react-card/",permalink:"/docs/next/alert-subscribe/react-card/",draft:!1,unlisted:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/blob/main/docs/alert-subscribe/react-card/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using External API's",permalink:"/docs/next/notifi-hosted-development/fetch-providers"},next:{title:"Creating a card config",permalink:"/docs/next/alert-subscribe/react-card/create-card-id"}},c={},l=[{value:"Design Guidelines",id:"design-guidelines",level:2},{value:"Tips",id:"tips",level:4},{value:"Solana",id:"solana",level:3},{value:"EVM (Ethereum, Polygon, Arbitrum, Avalanche or Binance)",id:"evm-ethereum-polygon-arbitrum-avalanche-or-binance",level:3},{value:"Aptos",id:"aptos",level:3},{value:"Acala",id:"acala",level:3},{value:"NEAR",id:"near",level:3},{value:"WalletConnect (Cross-chain wallet adaptor)",id:"walletconnect-cross-chain-wallet-adaptor",level:3},{value:"Sui",id:"sui",level:3}];function d(n){const e={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"integrating-notifi-react-card",children:"Integrating Notifi React card"}),"\n",(0,i.jsxs)(e.p,{children:["To see the source code, look at the ",(0,i.jsx)(e.a,{href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-react-card",children:"Notifi SDK"}),"."]}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsxs)(e.p,{children:["You will need a ",(0,i.jsx)(e.strong,{children:"card config"})," to use the Notifi React Card, which can be created in the ",(0,i.jsx)(e.a,{href:"https://admin.dev.notifi.network",children:"Admin Portal"}),". Follow the guide ",(0,i.jsx)(e.a,{href:"/docs/next/alert-subscribe/react-card/create-card-id",children:"here"})," to create a ",(0,i.jsx)(e.strong,{children:"card config"}),"."]})}),"\n",(0,i.jsx)(e.h1,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"npm"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm install @notifi-network/notifi-react-card\nnpm install --save-dev @notifi-network/notifi-core\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"yarn"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"yarn add @notifi-network/notifi-react-card\nyarn add --dev @notifi-network/notifi-core\n"})}),"\n",(0,i.jsx)(e.p,{children:"Import the following CSS file into your component to get baseline styling:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import '@notifi-network/notifi-react-card/dist/index.css';\n"})}),"\n",(0,i.jsx)(e.h2,{id:"design-guidelines",children:"Design Guidelines"}),"\n",(0,i.jsxs)(e.p,{children:["We have design recommendations on how to best present the UI to your dapp users. Check them out here: ",(0,i.jsx)(e.a,{href:"https://www.figma.com/file/ieF0Ynuc3WI608RCt7wKSf/Notifi-Template?node-id=0%3A1&t=v8zeo6UovJAOb9vR-0",children:"Figma"}),"."]}),"\n",(0,i.jsx)(e.h4,{id:"tips",children:"Tips"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Embed the bell icon by the wallet login section:\n",(0,i.jsx)(e.img,{src:"https://i.imgur.com/f2rnrpk.png",alt:"here"})]}),"\n",(0,i.jsx)(e.p,{children:"\xa0"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["There should be a state for the bell icon when connected/not connected:\n",(0,i.jsx)(e.img,{src:"https://i.imgur.com/V9yEeCj.png",alt:"example of not connected state"}),"\nIf not connected, the bell icon should be hidden."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Make sure that there is enough contrast between color selections."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Styling should be consistent with your current UI."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\xa0"}),"\n",(0,i.jsx)(e.h1,{id:"code-examples",children:"Code Examples"}),"\n",(0,i.jsx)(e.p,{children:"Please see below for code examples on the component configuration. Click on the dropdown button to check out the code snippet."}),"\n",(0,i.jsx)(e.h3,{id:"solana",children:"Solana"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)("summary",{children:["Integrate Card Component -- for Solana, you will also need to install ",(0,i.jsx)(e.code,{children:"@notifi-network/notifi-solana-hw-login"})]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import {\n  NotifiContext,\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport '@notifi-network/notifi-react-card/dist/index.css';\nimport { MemoProgramHardwareLoginPlugin } from '@notifi-network/notifi-solana-hw-login';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport React from 'react';\n\nimport './NotifiCard.css';\n\nexport const NotifiCard: React.FC = () => {\n  const { connection } = useConnection();\n  const { wallet, sendTransaction, signMessage } = useWallet();\n  const adapter = wallet?.adapter;\n  const publicKey = adapter?.publicKey?.toBase58() ?? null;\n\n  const hwLoginPlugin = useMemo(() => {\n    return new MemoProgramHardwareLoginPlugin({\n      walletPublicKey: publicKey ?? '',\n      connection,\n      sendTransaction,\n    });\n  }, [publicKey, connection, sendTransaction]);\n\n  if (publicKey === null || signMessage === undefined) {\n    // publicKey is required\n    return null;\n  }\n\n  const inputLabels: NotifiInputFieldsText = {\n    label: {\n      email: 'Email',\n      sms: 'Text Message',\n      telegram: 'Telegram',\n    },\n    placeholderText: {\n      email: 'Email',\n    },\n  };\n\n  const inputSeparators: NotifiInputSeparators = {\n    smsSeparator: {\n      content: 'OR',\n    },\n    emailSeparator: {\n      content: 'OR',\n    },\n    telegramSeparator: {\n      content: 'OR',\n    },\n  };\n\n  return (\n    <div className=\"container\">\n      <NotifiContext\n        dappAddress=\"<YOUR OWN DAPP ADDRESS HERE>\"\n        walletBlockchain=\"SOLANA\"\n        // keep this \"Production\" unless you have a special Development environment set up by Notifi\n        env=\"Production\"\n        walletPublicKey={publicKey}\n        hardwareLoginPlugin={hwLoginPlugin}\n        signMessage={signMessage}\n      >\n        <NotifiSubscriptionCard\n          darkMode\n          inputLabels={inputLabels}\n          inputSeparators={inputSeparators}\n          cardId=\"<YOUR OWN CARD ID HERE>\"\n        />\n      </NotifiContext>\n    </div>\n  );\n};\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"evm-ethereum-polygon-arbitrum-avalanche-or-binance",children:"EVM (Ethereum, Polygon, Arbitrum, Avalanche or Binance)"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Integrate Card Component"}),(0,i.jsxs)(e.p,{children:["Note: All EVM chains use Ethers. If using a supported EVM-chain, be sure to update the ",(0,i.jsx)(e.code,{children:"NotifiContext"})," params accordingly."]}),(0,i.jsx)(e.p,{children:"Note: Last tested with =>"}),(0,i.jsx)(e.p,{children:'"@usedapp/core": "^1.2.5"'}),(0,i.jsx)(e.p,{children:'"ethers": "^5.7.2"'}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { arrayify } from '@ethersproject/bytes';\nimport {\n  NotifiContext,\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport '@notifi-network/notifi-react-card/dist/index.css';\nimport { useEthers } from '@usedapp/core';\nimport { providers } from 'ethers';\nimport React, { useMemo } from 'react';\n\nexport const Notifi: React.FC = () => {\n  const { account, library } = useEthers();\n  const signer = useMemo(() => {\n    if (library instanceof providers.JsonRpcProvider) {\n      return library.getSigner();\n    }\n    return undefined;\n  }, [library]);\n\n  if (account === undefined || signer === undefined) {\n    // account is required\n    return null;\n  }\n\n  const inputLabels: NotifiInputFieldsText = {\n    label: {\n      email: 'Email',\n      sms: 'Text Message',\n      telegram: 'Telegram',\n    },\n    placeholderText: {\n      email: 'Email',\n    },\n  };\n\n  const inputSeparators: NotifiInputSeparators = {\n    smsSeparator: {\n      content: 'OR',\n    },\n    emailSeparator: {\n      content: 'OR',\n    },\n  };\n\n  return (\n    <NotifiContext\n      dappAddress=\"<YOUR OWN DAPP ADDRESS HERE>\"\n      // keep this \"Production\" unless you have a special Development environment set up by Notifi\n      env=\"Production\"\n      signMessage={async (message: Uint8Array) => {\n        const result = await signer.signMessage(message);\n        return arrayify(result);\n      }}\n      walletPublicKey={account}\n      walletBlockchain=\"ETHEREUM\" // NOTE - Please update to the correct chain name.\n      //If Polygon, use \"POLYGON\"\n      //If Arbitrum, use \"ARBITRUM\"\n      //If Binance, use \"BINANCE\"\n      //If Optimism, use OPTIMISM\n    >\n      <NotifiSubscriptionCard\n        cardId=\"<YOUR OWN CARD ID HERE>\"\n        inputLabels={inputLabels}\n        inputSeparators={inputSeparators}\n        darkMode //optional\n      />\n    </NotifiContext>\n  );\n};\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"aptos",children:"Aptos"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Integrate Card Component"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { useWallet } from '@aptos-labs/wallet-adapter-react';\nimport {\n  NotifiContext,\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport '@notifi-network/notifi-react-card/dist/index.css';\nimport React from 'react';\n\nexport const Notifi: React.FC = () => {\n  const { signMessage, account } = useWallet();\n\n  if (\n    account === null ||\n    account.address === null ||\n    account.publicKey === null\n  ) {\n    // account is required\n    return null;\n  }\n\n  const inputLabels: NotifiInputFieldsText = {\n    label: {\n      email: 'Email',\n      sms: 'Text Message',\n      telegram: 'Telegram',\n    },\n    placeholderText: {\n      email: 'Email',\n    },\n  };\n\n  const inputSeparators: NotifiInputSeparators = {\n    smsSeparator: {\n      content: 'OR',\n    },\n    emailSeparator: {\n      content: 'OR',\n    },\n  };\n\n  return (\n    <NotifiContext\n      dappAddress=\"<YOUR OWN DAPP ADDRESS HERE>\"\n      // keep this \"Production\" unless you have a special Development environment set up by Notifi\n      env=\"Production\"\n      walletBlockchain=\"APTOS\"\n      accountAddress={account.address.toString()}\n      walletPublicKey={account.publicKey.toString()}\n      signMessage={async (message: string, nonce: number) => {\n        const result = await signMessage({\n          address: true,\n          message,\n          nonce: `${nonce}`,\n        });\n\n        if (result === null) {\n          throw new Error('failed to sign');\n        }\n\n        if (Array.isArray(result.signature)) {\n          return result.signature[0];\n        }\n        return result.signature;\n      }}\n    >\n      <NotifiSubscriptionCard\n        cardId=\"<YOUR OWN CARD ID HERE>\"\n        inputLabels={inputLabels}\n        inputSeparators={inputSeparators}\n        darkMode //optional\n      />\n    </NotifiContext>\n  );\n};\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"acala",children:"Acala"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Integrate Card Component"}),(0,i.jsx)(e.p,{children:"Create a hook that gets all of the account data using Polkadot util libraries"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { web3Accounts, web3FromAddress } from '@polkadot/extension-dapp';\nimport { stringToHex } from '@polkadot/util';\n\nexport default function useAcalaWallet() {\n  const [account, setAccount] = useState<string | null>(null);\n  const [acalaAddress, setAcalaAddress] = useState<string | null>(null);\n  const [polkadotPublicKey, setPolkadotPublicKey] = useState<string | null>(\n    null,\n  );\n\n  useEffect(() => {\n    async function getAccounts() {\n      const allAccounts = await web3Accounts();\n      const account = allAccounts[0].address;\n      if (account) setAccount(account);\n    }\n    getAccounts();\n  }, []);\n\n  const signMessage = useCallback(async (address: string, message: string) => {\n    const extension = await web3FromAddress(address);\n    const signRaw = extension?.signer?.signRaw;\n    const data = stringToHex(message);\n    const signMessage = await signRaw({\n      address,\n      data,\n      type: 'bytes',\n    });\n    return signMessage.signature;\n  }, []);\n\n  const getAcalaAddress = (address: string): string => {\n    const publicKey = decodeAddress(address);\n    return encodeAddress(publicKey, 10);\n  };\n\n  const getPolkadotPublicKey = (address: string): string => {\n    const publicKey = decodeAddress(address);\n    const decodedPublicKey = u8aToHex(publicKey);\n    return decodedPublicKey;\n  };\n\n  useEffect(() => {\n    if (account) {\n      const acalaAddress = getAcalaAddress(account);\n      if (acalaAddress) setAcalaAddress(acalaAddress);\n      const polkadotPublicKey = getPolkadotPublicKey(account);\n      if (polkadotPublicKey) setPolkadotPublicKey(polkadotPublicKey);\n    }\n  }, [account]);\n\n  return { account, acalaAddress, polkadotPublicKey, signMessage };\n}\n"})}),(0,i.jsx)(e.p,{children:"Create a component for the Notifi React Card"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import {\n  NotifiContext,\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport '@notifi-network/notifi-react-card/dist/index.css';\nimport React, { useCallback, useState } from 'react';\nimport { useAcalaWallet } from 'path-to-custom-hook';\n\nexport const Notifi: React.FC = () => {\n\n  const { acoount, acalaAddress, polkadotPublicKey, signMessage } = useAcalaWallet();\n\n  if (\n    account === null ||\n    acalaAddress === null ||\n    polkadotPublicKey === null\n  ) {\n    // account is required\n    return null;\n  }\n  const inputLabels: NotifiInputFieldsText = {\n    label: {\n      email: 'Email',\n      sms: 'Text Message',\n      telegram: 'Telegram',\n    },\n    placeholderText: {\n      email: 'Email',\n    },\n  };\n  const inputSeparators: NotifiInputSeparators = {\n    smsSeparator: {\n      content: 'OR',\n    },\n    emailSeparator: {\n      content: 'OR',\n    },\n  };\n\n  return (\n    <NotifiContext\n      dappAddress=\"<YOUR OWN DAPP ADDRESS HERE>\"\n      // keep this \"Production\" unless you have a special Development environment set up by Notifi\n      env=\"Production\"\n      walletBlockchain=\"ACALA\"\n      accountAddress={acalaAddress}\n      walletPublicKey={polkadotPublicKey}\n      signMessage={async (accountAddress: string, message: string) => {\n        await signMessage(\n          address: accountAddress;\n          message: message;\n      );\n      }}\n    >\n      <NotifiSubscriptionCard\n        cardId=\"<YOUR OWN CARD ID HERE>\"\n        inputLabels={inputLabels}\n        inputSeparators={inputSeparators}\n        darkMode //optional\n      />\n    </NotifiContext>\n  );\n};\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"near",children:"NEAR"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Integrate Card Component"}),(0,i.jsx)(e.p,{children:"Create a hook that gets all of the account data using NEAR API"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { keyStores } from 'near-api-js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { useWalletSelector } from '../components/NearWalletContextProvider';\n\n//assume that you have NEARWalletContextProvider setup\n//example: https://github.com/near/wallet-selector/blob/main/examples/react/contexts/WalletSelectorContext.tsx\n\nexport default function useNearWallet() {\n  const { accountId } = useWalletSelector();\n  const [walletPublicKey, setWalletPublicKey] = useState<string | null>(null);\n\n  const config = {\n    networkId: 'testnet', //adjust based on network type\n  };\n\n  const keyStore = useMemo(() => {\n    return new keyStores.BrowserLocalStorageKeyStore();\n  }, []);\n\n  useEffect(() => {\n    if (!accountId) {\n      setWalletPublicKey(null);\n    }\n  }, [accountId]);\n\n  useEffect(() => {\n    async function getPublicKey() {\n      const keyPair = await keyStore.getKey(config.networkId, accountId!);\n      const publicKey = keyPair.getPublicKey().toString();\n      // remove the ed25519: appending for the wallet public key\n      const publicKeyWithoutTypeAppend = publicKey.replace('ed25519:', '');\n      setWalletPublicKey(publicKeyWithoutTypeAppend);\n    }\n    getPublicKey();\n  }, [accountId, config.networkId, keyStore]);\n\n  const signMessage = useCallback(\n    async (message: Uint8Array) => {\n      const keyPair = await keyStore.getKey(config.networkId, accountId!);\n      const { signature } = keyPair.sign(message);\n      return signature;\n    },\n    [accountId, config.networkId, keyStore],\n  );\n\n  return { account: accountId, walletPublicKey, signMessage };\n}\n"})}),(0,i.jsx)(e.p,{children:"Create a component for the Notifi React Card"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import {\n  NotifiContext,\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport '@notifi-network/notifi-react-card/dist/index.css';\nimport { useNearWallet } from 'path-to-custom-hook';\nimport React, { useCallback, useState } from 'react';\n\nexport const Notifi: React.FC = () => {\n  const { account, walletPublicKey, signMessage } = useNearWallet();\n\n  if (account === null || walletPublicKey === null) {\n    // account is required\n    return null;\n  }\n\n  const inputLabels: NotifiInputFieldsText = {\n    label: {\n      email: 'Email',\n      sms: 'Text Message',\n      telegram: 'Telegram',\n    },\n    placeholderText: {\n      email: 'Email',\n    },\n  };\n\n  const inputSeparators: NotifiInputSeparators = {\n    smsSeparator: {\n      content: 'OR',\n    },\n    emailSeparator: {\n      content: 'OR',\n    },\n  };\n\n  return (\n    <NotifiContext\n      dappAddress=\"<YOUR OWN DAPP ADDRESS HERE>\"\n      // keep this \"Production\" unless you have a special Development environment set up by Notifi\n      env=\"Production\"\n      walletBlockchain=\"NEAR\"\n      accountAddress={account}\n      walletPublicKey={walletPublicKey} // require wallet public key without ed25519: append\n      signMessage={signMessage}\n    >\n      <NotifiSubscriptionCard\n        cardId=\"<YOUR OWN CARD ID HERE>\"\n        inputLabels={inputLabels}\n        inputSeparators={inputSeparators}\n        darkMode //optional\n      />\n    </NotifiContext>\n  );\n};\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"walletconnect-cross-chain-wallet-adaptor",children:"WalletConnect (Cross-chain wallet adaptor)"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Integrate Card Component"}),(0,i.jsx)(e.p,{children:"Note:"}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Ethers.js & wagmi are used. Be sure these two are installed as dependencies."}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"NotifiContext"})," params needs to be updated accordingly."]}),"\n"]}),(0,i.jsx)(e.p,{children:"Create a WallectConnectProvider by WagmiConfig"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { FC, PropsWithChildren } from 'react';\nimport { WagmiConfig, configureChains, createClient, mainnet } from 'wagmi';\nimport { WalletConnectConnector } from 'wagmi/connectors/walletConnect';\nimport { infuraProvider } from 'wagmi/providers/infura';\n\nexport const connector = new WalletConnectConnector({\n  chains: [mainnet],\n  options: {\n    projectId: '<YOUR WALLETCONNECT PROJECT ID HERE>', // Get Project ID at https://cloud.walletconnect.com/\n  },\n});\n\nexport const WalletConnectProvider: FC<PropsWithChildren> = ({ children }) => {\n  const { provider } = configureChains(\n    [mainnet],\n    [infuraProvider({ apiKey: '<YOUR INFURA API KEY HERE>' })], // Get Infura apiKey at https://www.infura.io/\n  );\n  const client = createClient({\n    autoConnect: true,\n    connectors: [connector],\n    provider: provider,\n  });\n  return <WagmiConfig client={client}>{children}</WagmiConfig>;\n};\n"})}),(0,i.jsx)(e.p,{children:"Wrap the React </App> with <WalletConnectProvider />"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"...\nconst container = document.getElementById('root');\nif (container != null) {\n  const root = ReactDOMClient.createRoot(container);\n  root.render(\n    <React.StrictMode>\n      ...\n        <WalletConnectProvider>\n            <App />\n        </WalletConnectProvider>\n      ...\n    </React.StrictMode>,\n  );\n}\n"})}),(0,i.jsx)(e.p,{children:"Place the NotifiSubscriptionCard by passing in corresponding NotifiContext properties"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { connector } from '<PATH TO WalletConnectorProvider.tsx>';\nimport {\n  NotifiContext,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport { arrayify } from 'ethers/lib/utils.js';\nimport { useAccount, useConnect, useDisconnect, useSignMessage } from 'wagmi';\n\nexport const WalletConnectCard = () => {\n  const { address, isConnected } = useAccount();\n\n  const { connect } = useConnect({\n    connector: connector,\n  });\n  const { disconnect } = useDisconnect();\n\n  const { signMessageAsync } = useSignMessage();\n  return (\n    <NotifiContext\n      dappAddress=\"<YOUR OWN DAPP ADDRESS HERE>\"\n      // keep this \"Production\" unless you have a special Development environment set up by Notifi\n      env=\"Production\"\n      signMessage={async (message) => {\n        const result = await signMessageAsync({ message });\n        return arrayify(result);\n      }}\n      walletPublicKey={address ?? ''}\n      walletBlockchain=\"ETHEREUM\"\n    >\n      <NotifiSubscriptionCard\n        cardId=\"<YOUR OWN CARD ID HERE>\"\n        darkMode //optional\n      />\n    </NotifiContext>\n  );\n};\n"})})]}),"\n",(0,i.jsx)(e.h3,{id:"sui",children:"Sui"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Integrate Card Component"}),(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://www.npmjs.com/package/ethos-connect",children:(0,i.jsx)(e.code,{children:"ethos-connect"})})," is used as the Sui wallet adaptor. Make sure it's installed as a dependency."]}),"\n"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm install ethos-connect # For npm\nyarn add ethos-connect # For yarn\n"})}),(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Create a EthosWalletProvider component"}),"\n"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"// EthosWalletProvider.tsx\nimport { EthosConnectProvider } from 'ethos-connect';\nimport { PropsWithChildren } from 'react';\n\nexport const EthosWalletProvider: React.FC<PropsWithChildren> = ({\n  children,\n}) => {\n  return (\n    <EthosConnectProvider\n      ethosConfiguration={{\n        hideEmailSignIn: true, // defaults to false\n      }}\n    >\n      {children}\n    </EthosConnectProvider>\n  );\n};\n"})}),(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"Wrap the React </App> with <EthosWalletProvider />"}),"\n"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { EthosWalletProvider } from '<PATH TO EthosWalletProvider.tsx>';\n<EthosWalletProvider></App> <EthosWalletProvider />\n"})}),(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"Place the NotifiSubscriptionCard by passing in corresponding NotifiContext properties"}),"\n"]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { Uint8SignMessageFunction } from '@notifi-network/notifi-core';\nimport {\n  NotifiContext,\n  NotifiInputFieldsText,\n  NotifiInputSeparators,\n  NotifiSubscriptionCard,\n} from '@notifi-network/notifi-react-card';\nimport { EthosConnectStatus, SignInButton, ethos } from 'ethos-connect';\nimport React from 'react';\n\nexport const SuiNotifiCard: React.FC = () => {\n  const { status, wallet } = ethos.useWallet();\n\n  const signMessage: Uint8SignMessageFunction = async (message: Uint8Array) => {\n    if (!wallet) {\n      throw new Error('Wallet not connected');\n    }\n\n    const signature = await wallet.signMessage({\n      message,\n    });\n\n    const signatureBuffer = Buffer.from(signature.signature);\n    return signatureBuffer;\n  };\n\n  const inputLabels: NotifiInputFieldsText = {\n    label: {\n      email: 'Email',\n      sms: 'Text Message',\n      telegram: 'Telegram',\n    },\n    placeholderText: {\n      email: 'Email',\n    },\n  };\n\n  const inputSeparators: NotifiInputSeparators = {\n    smsSeparator: {\n      content: '',\n    },\n    emailSeparator: {\n      content: '',\n    },\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Notifi Card: Sui</h1>\n      {status === EthosConnectStatus.Connected && wallet ? (\n        <NotifiContext\n          dappAddress=\"< YOUR OWN DAPP ADDRESS HERE >\"\n          walletBlockchain=\"SUI\"\n          // keep this \"Production\" unless you have a special Development environment set up by Notifi\n          env=\"Production\"\n          accountAddress={wallet.address}\n          walletPublicKey={wallet.address}\n          signMessage={signMessage}\n        >\n          Connected SUI Wallet: <br /> {wallet?.address}\n          <button onClick={wallet.disconnect}> DISCONNECT</button>\n          <NotifiSubscriptionCard\n            darkMode\n            inputs={{ userWallet: wallet.address }}\n            inputLabels={inputLabels}\n            inputSeparators={inputSeparators}\n            cardId=\"< YOUR OWN CARD ID HERE >\"\n            onClose={() => alert('nope you must stay')}\n          />\n        </NotifiContext>\n      ) : (\n        <SignInButton>CONNECT SUI WALLET</SignInButton>\n      )}\n    </div>\n  );\n};\n"})})]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);