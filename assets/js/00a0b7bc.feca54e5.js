"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[56],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},l="Supporting multiple addresses",s={unversionedId:"advanced/multi-wallet",id:"advanced/multi-wallet",title:"Supporting multiple addresses",description:"Notifi seemless supports multiple addresses per user. This means users with multiple wallet addresses can:",source:"@site/docs/advanced/multi-wallet.md",sourceDirName:"advanced",slug:"/advanced/multi-wallet",permalink:"/docs/advanced/multi-wallet",draft:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/docs/advanced/multi-wallet.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Custom email templates",permalink:"/docs/alert-design/custom-email-templates"},next:{title:"Notifi for users",permalink:"/docs/for-users/"}},o={},p=[{value:"Example user flow",id:"example-user-flow",level:2},{value:"Integration introduction",id:"integration-introduction",level:2},{value:"How to integrate",id:"how-to-integrate",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supporting-multiple-addresses"},"Supporting multiple addresses"),(0,r.kt)("p",null,"Notifi seemless supports multiple addresses per user. This means users with multiple wallet addresses can: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sign up to alerts with all their wallet adresses at the same time "),(0,r.kt)("li",{parentName:"ul"},"Verify multiple wallet addresses and link them to their Notifi account"),(0,r.kt)("li",{parentName:"ul"},"View alert histories of their wallet addresses in one place ")),(0,r.kt)("p",null,"This can be very useful for scenarios, where users are naturally expected to handle multiple addresses, such as: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Direct integrations of Notifi into browser extension wallets"),(0,r.kt)("li",{parentName:"ul"},"Multichain dApps where users can sign up with wallets from multiple chains ")),(0,r.kt)("h2",{id:"example-user-flow"},"Example user flow"),(0,r.kt)("p",null,"See an example user flow of a direct integration into a browser extension wallet in our ",(0,r.kt)("a",{parentName:"p",href:"https://www.figma.com/file/ieF0Ynuc3WI608RCt7wKSf/Notifi-Template"},"Figma")),(0,r.kt)("h2",{id:"integration-introduction"},"Integration introduction"),(0,r.kt)("p",null,"Currently multiple addresses are only supported through our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-react-card"},(0,r.kt)("strong",{parentName:"a"},"React Card")),".  "),(0,r.kt)("p",null,"To enable support for multiple addresses use the ",(0,r.kt)("inlineCode",{parentName:"p"},"multiWallet: MultiWalletParams")," property in ",(0,r.kt)("inlineCode",{parentName:"p"},"NotifiContext")," when adding the React Card, which is of the following type: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type MultiWalletParams = Readonly<{\n  ownedWallets: ReadonlyArray<WalletWithSignParams>;\n}>;\n\ntype WalletWithSignParams = Readonly<{\n  displayName?: string;\n  walletBlockchain:\n    | 'ETHEREUM'\n    | 'POLYGON'\n    | 'ARBITRUM'\n    | 'AVALANCHE'\n    | 'SOLANA'\n    | 'BINANCE'\n    | 'OPTIMISM';\n  walletPublicKey: string;\n  signMessage: Uint8SignMessageFunction;\n}>\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," See the full definition of the type ",(0,r.kt)("inlineCode",{parentName:"p"},"WalletWithSignParams")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/notifi-network/notifi-sdk-ts/blob/main/packages/notifi-core/lib/NotifiClient.ts"},"here"))),(0,r.kt)("p",null,"With this adding ",(0,r.kt)("inlineCode",{parentName:"p"},"multiWallet")," is easy, once the list of wallet addresses of the user has been obtained. "),(0,r.kt)("h2",{id:"how-to-integrate"},"How to integrate"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Obtain the list of wallet addresses "),(0,r.kt)("p",{parentName:"li"},"This will depend on the blockchain and wallet, but often a ",(0,r.kt)("inlineCode",{parentName:"p"},"useWallet()")," hook can be used to fetch an array of all wallet addresses incl. their public keys")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Construct ",(0,r.kt)("inlineCode",{parentName:"p"},"signMessage")," functions for every address"),(0,r.kt)("p",{parentName:"li"},"This will again depend on the blockchain you are developing for. Generally a function that takes a hashed message, signs it, and returns the signature is required. "),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Code example for Aptos"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const { signMessage, account } = useWallet();\n\nconst signMessageForAccount = async (address: string) => {\n  return async (message: string, nonce:number) => {\n    const messageBuffer = ['Aptos', 'address: ${address}', 'nonce: ${nonce}', 'message: ${message}]\n    const result = await signMessage(address, messageBuffer.join('\\n'));\n    return result;\n  }\n};\n")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Construct a ",(0,r.kt)("inlineCode",{parentName:"p"},"WalletWithSignParams")," array with the public keys and ",(0,r.kt)("inlineCode",{parentName:"p"},"signMessage")," functions and pass it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"multiWallet")," property of ",(0,r.kt)("inlineCode",{parentName:"p"},"NotifiContext")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Code example for Aptos"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// simplified code for demonstration purposes\nconst { accounts } = useWallet();\n\nconst ownedWallets = useMemo<ReadonlyArray<WalletWithSignParams>>(\n  () =>\n    accounts.map((account) => ({\n      walletBlockchain: "APTOS",\n      signMessage: signMessageForAccount(account),\n      walletPublicKey: account.publicKey,\n      accountAddress: account.address,\n      displayName: account.name,\n    })),\n  [accounts, signMessageForAccount]\n);\n')),(0,r.kt)("hr",{parentName:"li"}),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'export const Notifi: React.FC = () => {\n  ...\n  return (\n    <NotifiContext\n      dappAddress="<YOUR OWN DAPP ADDRESS HERE>"\n      env="Development"\n      walletBlockchain="APTOS"\n      accountAddress={account.address.toString()}\n      walletPublicKey={account.publicKey.toString()}\n      signMessage={signMessage}\n      // add multiWallet here\n      multiWallet={ownedWallets}\n    >\n      <NotifiSubscriptionCard\n        cardId="<YOUR OWN CARD ID HERE>"\n        inputLabels={inputLabels}\n        inputSeparators={inputSeparators}\n        darkMode //optional\n      />\n    </NotifiContext>\n  );\n};\n'))))))}d.isMDXComponent=!0}}]);