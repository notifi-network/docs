"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4925],{5036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=t(4848),s=t(8453);const o={},r="Alerts for new XMTP messages",c={id:"advanced/xmtp-source",title:"Alerts for new XMTP messages",description:"This page will walk through an integration of XMTP as a source using the Notifi React Card and Admin Portal. This will alert an user whenever they receive a new message to any XMTP conversation they have at the time of subscribing.",source:"@site/docs/advanced/xmtp-source.md",sourceDirName:"advanced",slug:"/advanced/xmtp-source",permalink:"/docs/next/advanced/xmtp-source",draft:!1,unlisted:!1,editUrl:"https://github.com/notifi-network/notifi-network.github.io/blob/main/docs/advanced/xmtp-source.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Supporting multiple addresses",permalink:"/docs/next/advanced/multi-wallet"},next:{title:"Notifi for users",permalink:"/docs/next/for-users/"}},a={},d=[{value:"Setting up Card Config",id:"setting-up-card-config",level:2},{value:"Step 1",id:"step-1",level:4},{value:"Step 2",id:"step-2",level:4},{value:"Step 3",id:"step-3",level:4},{value:"Setting up React Card",id:"setting-up-react-card",level:2},{value:"Step 1",id:"step-1-1",level:4},{value:"Step 2",id:"step-2-1",level:4},{value:"Step 3",id:"step-3-1",level:4},{value:"Full code example",id:"full-code-example",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"alerts-for-new-xmtp-messages",children:"Alerts for new XMTP messages"}),"\n",(0,i.jsxs)(n.p,{children:["This page will walk through an integration of XMTP as a ",(0,i.jsx)(n.a,{href:"../integration-overview/alerts-in-depth#source",children:"source"})," using the ",(0,i.jsx)(n.strong,{children:"Notifi React Card"})," and ",(0,i.jsx)(n.strong,{children:"Admin Portal"}),". This will alert an user whenever they receive a new message to any XMTP conversation they have at the time of subscribing."]}),"\n",(0,i.jsx)(n.p,{children:"Make sure you are using a SDK version higher than the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"@notifi-network/notifi-core": "^0.59.2-alpha.3+7347f24",\n"@notifi-network/notifi-react-card": "^0.59.2-alpha.3+7347f24",\n'})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-card-config",children:"Setting up Card Config"}),"\n",(0,i.jsx)(n.h4,{id:"step-1",children:"Step 1"}),"\n",(0,i.jsxs)(n.p,{children:["Log in to the ",(0,i.jsx)(n.a,{href:"https://admin.dev.notifi.network",children:"Admin Portal"})," and edit the Card you want to use (or create a new one). Turn on ",(0,i.jsx)(n.em,{children:"Advanced Mode"})," in the bottom of the config."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Toggle on Advanced Mode",src:t(7292).A+"",width:"1100",height:"506"})}),"\n",(0,i.jsxs)(n.p,{children:["A new section, ",(0,i.jsx)(n.strong,{children:"Inputs"}),", will appear."]}),"\n",(0,i.jsx)(n.h4,{id:"step-2",children:"Step 2"}),"\n",(0,i.jsxs)(n.p,{children:["Add a new ",(0,i.jsx)(n.strong,{children:"input"})," of type ",(0,i.jsx)(n.code,{children:"XMTP Input"})," and click ",(0,i.jsx)(n.strong,{children:"+"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The input can be named arbitrarily, however it will be referenced in the code later. We are using ",(0,i.jsx)(n.code,{children:"XMTPTopics"})," in this example (these topics are XMTP topics, not Notifi topics)."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Create new input type",src:t(5399).A+"",width:"954",height:"342"})}),"\n",(0,i.jsx)(n.h4,{id:"step-3",children:"Step 3"}),"\n",(0,i.jsxs)(n.p,{children:["Create a new Notifi Topic of type ",(0,i.jsx)(n.strong,{children:"XMTP"})," (note that the name selected for Topic is shown on the React Card Toggle)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Create xmtp topic",src:t(9822).A+"",width:"952",height:"404"})}),"\n",(0,i.jsxs)(n.p,{children:["Click on ",(0,i.jsx)(n.strong,{children:"+"})," and select the input created in ",(0,i.jsx)(n.a,{href:"#step-2",children:"step 2"})," as input reference."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Select xmtp input",src:t(7537).A+"",width:"1200",height:"948"})}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-react-card",children:"Setting up React Card"}),"\n",(0,i.jsxs)(n.p,{children:["To set up the ",(0,i.jsx)(n.strong,{children:"React Card"})," we need to pass in the XMTP topics the user wants to subscribe to as the ",(0,i.jsx)(n.code,{children:"input"})," field in the ",(0,i.jsx)(n.code,{children:"NotifiSubscriptionCard"})," component. We can use the ",(0,i.jsx)(n.strong,{children:"input reference"})," that we defined above for this."]}),"\n",(0,i.jsx)(n.h4,{id:"step-1-1",children:"Step 1"}),"\n",(0,i.jsxs)(n.p,{children:["Fetch the XMTP conversations and topics the user wants to subscribe to. In this example we fetch them using the ",(0,i.jsx)(n.code,{children:"wagmi"})," package and ",(0,i.jsx)(n.code,{children:"useXmtpStore"})," from ",(0,i.jsx)(n.a,{href:"https://github.com/xmtp-labs/xmtp-inbox-web/store/xmtp",children:(0,i.jsx)(n.code,{children:"https://github.com/xmtp-labs/xmtp-inbox-web/store/xmtp"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { useAccount } from "wagmi";\nimport { useXmtpStore } from "../store/xmtp";\n\n...\n\nconst { conversations } = useXmtpStore();\nconst { address } = useAccount();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"step-2-1",children:"Step 2"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"string[]"})," containing all xmtp topic names. This array will be used as input reference later on."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// helper function \nconst buildContentTopic = (name: string): string => `/xmtp/0/${name}/proto`;\n\nconst buildUserInviteTopic = useCallback((): string => {\n  return buildContentTopic(`invite-${address}`);\n}, [address]);\n\nconst buildUserIntroTopic = useCallback((): string => {\n  return buildContentTopic(`intro-${address}`);\n}, [address]);\n\n// this is the object we will pass as input reference\nlet topics = useMemo<string[]>(\n  () => [buildUserInviteTopic(), buildUserIntroTopic()],\n  [buildUserIntroTopic, buildUserInviteTopic],\n);\n\nconst addTopic = (topicName: string) => {\n  if (!topics.includes(topicName)) {\n    topics.push(topicName);\n  }\n};\n\nconversations.forEach((c) => {\n  addTopic(c.topic);\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"step-3-1",children:"Step 3"}),"\n",(0,i.jsxs)(n.p,{children:["Pass the ",(0,i.jsx)(n.code,{children:"string[]"})," array as field into the ",(0,i.jsx)(n.code,{children:"NotifiSubscriptionCard"})," component."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'<NotifiSubscriptionCard\n  // Mind that "XMTPTopics" must match the name of the input reference defined in the Admin Portal\n  inputs={{ XMTPTopics: topics }}\n  cardId="<YOUR CARD ID HERE"\n/>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"full-code-example",children:"Full code example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { NotifiSubscriptionCard } from "@notifi-network/notifi-react-card";\nimport React, { SetStateAction, useCallback, useMemo } from "react";\nimport { useAccount } from "wagmi";\nimport { useXmtpStore } from "../store/xmtp";\nimport { NotifiContextWrapper } from "./contexts/NotifiContextWrapper";\nimport { Modal } from "./Modal";\ntype Props = {\n  show: boolean;\n  setShowNotifiModal: React.Dispatch<SetStateAction<boolean>>;\n};\n\nexport const NotifiModal = ({ setShowNotifiModal, show }: Props) => {\n  const { conversations } = useXmtpStore();\n  const { address } = useAccount();\n\n  const buildContentTopic = (name: string): string => `/xmtp/0/${name}/proto`;\n\n  const buildUserInviteTopic = useCallback((): string => {\n    return buildContentTopic(`invite-${address}`);\n  }, [address]);\n\n  const buildUserIntroTopic = useCallback((): string => {\n    return buildContentTopic(`intro-${address}`);\n  }, [address]);\n\n  let topics = useMemo<string[]>(\n    () => [buildUserInviteTopic(), buildUserIntroTopic()],\n    [buildUserIntroTopic, buildUserInviteTopic],\n  );\n\n  const addTopic = (topicName: string) => {\n    if (!topics.includes(topicName)) {\n      topics.push(topicName);\n    }\n  };\n\n  conversations.forEach((c) => {\n    addTopic(c.topic);\n  });\n\n  return (\n    <Modal\n      title=""\n      size="sm"\n      show={show}\n      onClose={() => setShowNotifiModal(false)}>\n      {!address ? (\n        <>Loading...</>\n      ) : (\n        <NotifiContext\n          dappAddress="<YOUR DAPP ADDRESS HERE>"\n          // keep this "Production" unless you have a special Development environment set up by Notifi\n          env="Production"\n          signMessage={async (message: Uint8Array) => {\n            const result = await signMessageAsync({ message });\n            return arrayify(result);\n          }}\n          walletPublicKey={address ?? ""}\n          walletBlockchain="ETHEREUM"\n        >\n          <NotifiSubscriptionCard\n            inputs={{ XMTPTopics: topics }}\n            cardId="<YOUR CARD ID HERE>"\n          />\n        </NotifiContext>\n      )}\n    </Modal>\n  );\n};\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},7292:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/1-75d1c3b55ec9429449f735924b70fbab.png"},5399:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/2-929f184b4df03ea29bf677f437b6e048.png"},9822:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/3-4f5591707ad3b1a0245dd7a7ed41b7f7.png"},7537:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/4-95c1a283e90f716cbc7014f930e683ed.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);